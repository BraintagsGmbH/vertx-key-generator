/*
 * #%L
 * Verticle for generation of IDs
 * %%
 * Copyright (C) 2017 Braintags GmbH
 * %%
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * #L%
 */
package de.braintags.vertx.keygenerator;

import java.util.Properties;

import de.braintags.vertx.util.exception.InitException;
import io.vertx.core.Context;
import io.vertx.core.Vertx;
import io.vertx.core.buffer.Buffer;
import io.vertx.core.file.FileSystem;
import io.vertx.core.json.Json;

/**
 * The settings contain the preferences to launch KeyGeneratorVerticle and are stored locally as file. They are loaded /
 * created on startup following the rules:
 * 
 * checking wether there exists a defined location inside the {@link Context} under the property
 * {@link #SETTINGS_LOCATION_PROPERTY}. If so, then the data are loaded from that file.
 * 
 * checking wether there exists a file named "nrSettings.json" in the directory "/.braintags/vertx/KeyGenerator" inside
 * the user directory
 * If so, then it is loaded.
 * 
 * If it does not exist, a default instance is created and saved in the user directory in the subdirectory
 * "/.braintags/vertx/"
 * 
 * 
 * @author Michael Remme
 * 
 */
public class KeyGeneratorSettings {
  private static final io.vertx.core.logging.Logger LOGGER = io.vertx.core.logging.LoggerFactory
      .getLogger(KeyGeneratorSettings.class);

  /**
   * The property which can be used to set the location of the stored file with Settings information
   */
  public static final String SETTINGS_LOCATION_PROPERTY = "de.braintags.keygenerator.settings.path";

  /**
   * The local directory for NetRelay
   */
  public static final String LOCAL_USER_DIRECTORY = System.getProperty("user.home") + "/.braintags/vertx/"
      + "KeyGenerator";

  private boolean edited = false;
  private Class<? extends IKeyGenerator> keyGeneratorClass;
  private Properties generatorProperties = new Properties();

  /**
   * Loads existing settings from the context, when the property {@link #SETTINGS_LOCATION_PROPERTY} is defined;
   * or loads or generates default settings and stores them in the local user directory, subdirectory .KeyGenerator
   * 
   * @param vertx
   *          the instance of {@link Vertx} to be used
   * @param defaultClass
   *          if Settings are created new, this is the generator class to be used
   * @param context
   *          the context, which could contain the property {@link #SETTINGS_LOCATION_PROPERTY}, where the location of
   *          the settings file is defined
   * @return
   */
  public static KeyGeneratorSettings loadSettings(Vertx vertx, Class<? extends IKeyGenerator> defaultClass, Context context)
      throws Exception {
    String path = context.config().getString(SETTINGS_LOCATION_PROPERTY);
    if (path != null) {
      return loadSettings(vertx, defaultClass, path);
    } else {
      vertx.fileSystem().mkdirsBlocking(LOCAL_USER_DIRECTORY);
      String localSettingsFileName = LOCAL_USER_DIRECTORY + "/" + KeyGeneratorVerticle.class.getName()
          + ".settings.json";
      return loadSettings(vertx, defaultClass, localSettingsFileName);
    }
  }

  private static KeyGeneratorSettings loadSettings(Vertx vertx, Class<? extends IKeyGenerator> defaultClass, String path)
      throws Exception {
    FileSystem fs = vertx.fileSystem();
    if (fs.existsBlocking(path)) {
      LOGGER.info("going to load settings from " + path);
      Buffer buffer = fs.readFileBlocking(path);
      KeyGeneratorSettings settings = Json.decodeValue(buffer.toString(), KeyGeneratorSettings.class);
      LOGGER.info("settings successfully loaded from " + path);
      return settings;
    } else {
      LOGGER.info("creating default settings and store them in " + path);
      KeyGeneratorSettings settings = createDefaultSettings(defaultClass);
      fs.writeFileBlocking(path, Buffer.buffer(Json.encodePrettily(settings)));
      String message = String.format(
          "Settings file did not exist and was created new in path %s. NOTE: edit the file, set edited to true and restart the server",
          path);
      throw new InitException(message);
    }

  }

  private static final KeyGeneratorSettings createDefaultSettings(Class<? extends IKeyGenerator> cls) throws Exception {
    KeyGeneratorSettings settings = new KeyGeneratorSettings();
    settings.keyGeneratorClass = cls;
    IKeyGenerator gen = cls.newInstance();
    settings.generatorProperties = gen.createDefaultProperties();
    return settings;
  }

  /**
   * If settings are autogenerated with the default values, they must be edited to apply them to the needs of the
   * project.
   * As long as this value is false ( which is the default value for new Settings ), the system won't start and cancel
   * the launch.
   * 
   * @return false, as long as value wasn't changed manually
   */
  public final boolean isEdited() {
    return edited;
  }

  /**
   * If settings are autogenerated with the default values, they must be edited to apply them to the needs of the
   * project.
   * As long as this value is false ( which is the default value for new Settings ), the system won't start and cancel
   * the launch.
   * 
   * @param edited
   *          set it to true, so that system is able to launch
   */
  public final void setEdited(boolean edited) {
    this.edited = edited;
  }

  /**
   * The name of the service, under which the verticle is published
   * 
   * @return the keyGeneratorClass
   */
  public final Class<? extends IKeyGenerator> getKeyGeneratorClass() {
    return keyGeneratorClass;
  }

  /**
   * The implementation of {@link IKeyGenerator} which shall be used
   * 
   * @param keyGeneratorClass
   *          the keyGeneratorClass to set
   */
  public final void setKeyGeneratorClass(Class<? extends IKeyGenerator> keyGeneratorClass) {
    this.keyGeneratorClass = keyGeneratorClass;
  }

  /**
   * The properties, which define the specific behaviour of the {@link IKeyGenerator} to be used
   * 
   * @return the generatorProperties
   */
  public final Properties getGeneratorProperties() {
    return generatorProperties;
  }

  /**
   * The properties, which define the specific behaviour of the {@link IKeyGenerator} to be used
   * 
   * @param generatorProperties
   *          the generatorProperties to set
   */
  public final void setGeneratorProperties(Properties generatorProperties) {
    this.generatorProperties = generatorProperties;
  }

}
